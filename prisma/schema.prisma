// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique @db.VarChar(255)
  name       String     @db.VarChar(100)
  password   String     @db.VarChar(255)
  role       userRole   @default(USER)
  avatar     String?
  bio        String?
  SEX        userSex    @default(NOTKNOW)
  tel        String
  cel        String
  rent       Rent[]
  property   Property[] @relation(name: "ownProperty")
  interests  Interest[] @relation(name: "interestingProperties")
  favorited  Property[] @relation(name: "favoritesProperties")
  interestId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Interest {
  id            Int       @id @default(autoincrement())
  uConfirmation Boolean   @default(false)
  pConfirmation Boolean   @default(false)
  User          User?     @relation("interestingProperties", fields: [userId], references: [id])
  userId        Int?
  Property      Property? @relation("interestingProperties", fields: [propertyId], references: [id])
  propertyId    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Property {
  id            Int              @id @default(autoincrement())
  name          String           @db.VarChar(100)
  description   String?
  img           String[]
  category      propertyCategory @default(HOUSE)
  vacancyPrice  Float
  cep           String           @db.VarChar(8)
  street        String           @db.VarChar(100)
  neighborhood  String           @db.VarChar(50)
  city          String           @db.VarChar(50)
  uf            String           @db.VarChar(2)
  country       String           @db.VarChar(2)
  number        String?          @db.VarChar(4)
  hasPool       Boolean          @default(false)
  hasGarage     Boolean          @default(false)
  hasGourmet    Boolean          @default(false)
  hasInternet   Boolean          @default(false)
  isPetFriendly Boolean          @default(false)
  isAdversiment Boolean          @default(false)
  viewed        Int
  ownerId       Int              @unique
  owner         User             @relation(name: "ownProperty", fields: [ownerId], references: [id])
  interests     Interest[]       @relation(name: "interestingProperties")
  favorited     User[]           @relation(name: "favoritesProperties")
  vacancy       Vacancy[]
  interestId    Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Vacancy {
  id         Int      @id @default(autoincrement())
  propertyId Int      @unique
  property   Property @relation(fields: [propertyId], references: [id])
  rent       Rent[]
  isOccupied Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Rent {
  id         Int       @id @default(autoincrement())
  renterId   Int       @unique
  renter     User      @relation(fields: [renterId], references: [id])
  vacancyId  Int       @unique
  vacancy    Vacancy   @relation(fields: [vacancyId], references: [id])
  evaluate   Evaluate? @relation(name: "propertyEvaluation", fields: [evaluateId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  evaluateId Int?
}

model Evaluate {
  id        Int      @id @default(autoincrement())
  value     Int
  comment   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rent      Rent[]   @relation("propertyEvaluation")
}

enum userRole {
  USER
  OWNER
  ADMIN
}

enum propertyCategory {
  HOUSE
  APARTMENT
}

enum userSex {
  NOTKNOW
  MALE
  FEMALE
  NOTAPPLICABLE
}
